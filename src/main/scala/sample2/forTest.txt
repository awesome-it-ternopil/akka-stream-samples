The way we #consume #services from the
#Internet today includes many #instances of
streaming data, #both downloading from a #service as well as #uploading to it or peer-to-peer data
transfers. #Regarding data as a stream of elements instead of
in its #entirety is very #useful because it matches the way #computers send and receive
them (for example via TCP), but it #is often also a #necessity because #data #sets frequently become too large to #be handled as
a whole. We spread #computations or analyses over #large clusters and call it “big data”, where the whole principle
of processing them is by feeding #those data sequentially—as a stream—through some CPUs.
Actors can be #seen as #dealing with
streams as well: #they send and receive series of #messages in
order to transfer #knowledge (or data) from one place to another. We have found it tedious and
error-prone to #implement all the
proper #measures in #order to achieve stable streaming between actors,
since in #addition to sending and receiving we also #need to take care to not
overflow any #buffers or mailboxes in #the process. Another pitfall #is that Actor messages
can be lost and must be #retransmitted in that case lest the stream have holes
on the #receiving side. When dealing with #streams of elements of a fixed given type,
Actors also do #not currently offer #good static guarantees that
no wiring #rrors are made: type-safety could be improved in this case.